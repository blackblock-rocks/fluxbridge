plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

/**
 * Version setup
 */
def baseVersion = project.project_version
def baseGroup = project.maven_group
def localPropertiesFile = file('local.properties')
def localProperties = new Properties()

if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}

def envVars = System.getenv()
def currentEnvironment = envVars.getOrDefault("ENV", localProperties.getProperty("environment", "dev"))
def isDevelopment = currentEnvironment == "dev"
def localRepoDir = null
ext.versionModifier = null

if (localProperties.hasProperty("localRepoDir")) {
    localRepoDir = localProperties.getProperty("localRepoDir")
} else if (project.hasProperty("localRepoDir")) {
    localRepoDir = project.findProperty("localRepoDir")
}

if (isDevelopment) {
    versionModifier = "-SNAPSHOT"
}

def constructVersion(baseVersion) {
    def result = baseVersion + versionModifier
    return result
}

version = constructVersion(baseVersion)
group = baseGroup

println("Info: currentEnvironment = $currentEnvironment")
println("Info: isDevelopment = $isDevelopment")
println("Info: localRepoDir = $localRepoDir")
println("Info: versionModifier = $versionModifier")
println("Info: version = " + version)

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenLocal()

    mavenCentral()
    maven {
        url 'https://ci.lucko.me/plugin/repository/everything/'
    }

    maven {
        name 'velocity'
        url 'https://nexus.velocitypowered.com/repository/maven-public/'
    }

    maven {
        url 'https://repo.essentialsx.net/n3fs/'
    }

    maven {
        url = uri('https://nexus.velocitypowered.com/repository/maven-public/')
    }

    maven {
        url = uri('https://repo.spongepowered.org/maven')
    }

    maven {
        url = uri('https://nexus.vankka.dev/repository/maven-public/')
    }

    maven {
        url = uri('https://jcenter.bintray.com')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    if (isDevelopment && localRepoDir) {
        maven {
            url localRepoDir
        }
    }
}

def fluxchatVersion = constructVersion(project.fluxchat_version)

dependencies {
    implementation "org.javacord:javacord:${project.javacord_version}"
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.11.0'
    implementation "com.vdurmont:emoji-java:${project.emoji_java_version}"
    implementation "dev.vankka:mcdiscordreserializer:${project.mcdiscordreserializer_version}"
    implementation "club.minnced:discord-webhooks:${project.discord_webhooks_version}"

    annotationProcessor "com.velocitypowered:velocity-api:${project.velocity_api_version}"
    compileOnly "com.velocitypowered:velocity-api:${project.velocity_api_version}"

    compileOnly "uk.co.n3fs.mc:Neutron-N3FS:${project.neutron_n3fs_version}"
    compileOnly "rocks.blackblock:fluxchat:${fluxchatVersion}"
}

build.dependsOn shadowJar

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        repositories {
            if (envVars.MAVEN_URL) {
                maven {
                    credentials {
                        username envVars.MAVEN_USERNAME
                        password envVars.MAVEN_PASSWORD
                    }
                    url envVars.MAVEN_URL
                }
            } else {
                mavenLocal()
            }

            if (isDevelopment) {

                if (localRepoDir) {
                    maven {
                        name = 'local'
                        url = uri(localRepoDir)
                    }
                } else {
                    mavenLocal()
                }
            }
        }
    }
}
